
let mapleader = ","

au BufWritePost .vimrc so $MYVIMRC
au BufEnter *.rb syn match error contained "\<binding.pry\>"

set ttyfast
set ttyscroll=1
set lazyredraw

let base16colorspace=256
:nnoremap ; :
:inoremap jj <ESC>
:inoremap ii <Nop>
:nnoremap <c-a> 0
:nnoremap <c-e> $
:noremap y "+Y
:noremap p "+gP

:noremap <c-l> :tabnext<cr>
:noremap <c-h> :tabprevious<cr>
" NERDTree----------------------------------------------------------------- {{{
:autocmd FileType nerdtree nmap <buffer> l o
:autocmd FileType nerdtree nmap <buffer> h x
:autocmd FileType nerdtree nmap <buffer> <Space> o
" }}}

" Folding ----------------------------------------------------------------- {{{
set foldmethod=syntax
set foldlevelstart=2

" Space to toggle folds.
nnoremap <Space> za
vnoremap <Space> za

" Make zO recursively open whatever fold we're in, even if it's partially open.
nnoremap zO zczO

" "Focus" the current line.  Basically:
"
" 1. Close all folds.
" 2. Open just the folds containing the current line.
" 3. Move the line to a little bit (15 lines) above the center of the screen.
" 4. Pulse the cursor line.  My eyes are bad.
"
" This mapping wipes out the z mark, which I never use.
"
" I use :sus for the rare times I want to actually background Vim.
nnoremap <c-z> mzzMzvzz15<c-e>`z

function! MyFoldText() " {{{
    let line = getline(v:foldstart)

    let nucolwidth = &fdc + &number * &numberwidth
    let windowwidth = winwidth(0) - nucolwidth - 3
    let foldedlinecount = v:foldend - v:foldstart

    " expand tabs into spaces
    let onetab = strpart('          ', 0, &tabstop)
    let line = substitute(line, '\t', onetab, 'g')

    let line = strpart(line, 0, windowwidth - 2 -len(foldedlinecount))
    let fillcharcount = windowwidth - len(line) - len(foldedlinecount)
    return line . '…' . repeat(" ",fillcharcount) . foldedlinecount . '…' . ' '
endfunction " }}}
set foldtext=MyFoldText()


" }}}

